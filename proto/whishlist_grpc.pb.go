// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: whishlist.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WishlistServiceClient is the client API for WishlistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WishlistServiceClient interface {
	CreateWishlist(ctx context.Context, in *CreateWishlistReq, opts ...grpc.CallOption) (*CreateWishlistRes, error)
	AddItemWishlist(ctx context.Context, in *AddItemReq, opts ...grpc.CallOption) (*AddItemRes, error)
	ListWishlist(ctx context.Context, in *ListWishlistReq, opts ...grpc.CallOption) (*ListWishlistRes, error)
}

type wishlistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWishlistServiceClient(cc grpc.ClientConnInterface) WishlistServiceClient {
	return &wishlistServiceClient{cc}
}

func (c *wishlistServiceClient) CreateWishlist(ctx context.Context, in *CreateWishlistReq, opts ...grpc.CallOption) (*CreateWishlistRes, error) {
	out := new(CreateWishlistRes)
	err := c.cc.Invoke(ctx, "/wishlist.WishlistService/CreateWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) AddItemWishlist(ctx context.Context, in *AddItemReq, opts ...grpc.CallOption) (*AddItemRes, error) {
	out := new(AddItemRes)
	err := c.cc.Invoke(ctx, "/wishlist.WishlistService/AddItemWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wishlistServiceClient) ListWishlist(ctx context.Context, in *ListWishlistReq, opts ...grpc.CallOption) (*ListWishlistRes, error) {
	out := new(ListWishlistRes)
	err := c.cc.Invoke(ctx, "/wishlist.WishlistService/ListWishlist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WishlistServiceServer is the server API for WishlistService service.
// All implementations must embed UnimplementedWishlistServiceServer
// for forward compatibility
type WishlistServiceServer interface {
	CreateWishlist(context.Context, *CreateWishlistReq) (*CreateWishlistRes, error)
	AddItemWishlist(context.Context, *AddItemReq) (*AddItemRes, error)
	ListWishlist(context.Context, *ListWishlistReq) (*ListWishlistRes, error)
	mustEmbedUnimplementedWishlistServiceServer()
}

// UnimplementedWishlistServiceServer must be embedded to have forward compatible implementations.
type UnimplementedWishlistServiceServer struct {
}

func (UnimplementedWishlistServiceServer) CreateWishlist(context.Context, *CreateWishlistReq) (*CreateWishlistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) AddItemWishlist(context.Context, *AddItemReq) (*AddItemRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddItemWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) ListWishlist(context.Context, *ListWishlistReq) (*ListWishlistRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWishlist not implemented")
}
func (UnimplementedWishlistServiceServer) mustEmbedUnimplementedWishlistServiceServer() {}

// UnsafeWishlistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WishlistServiceServer will
// result in compilation errors.
type UnsafeWishlistServiceServer interface {
	mustEmbedUnimplementedWishlistServiceServer()
}

func RegisterWishlistServiceServer(s grpc.ServiceRegistrar, srv WishlistServiceServer) {
	s.RegisterService(&WishlistService_ServiceDesc, srv)
}

func _WishlistService_CreateWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateWishlistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wishlist.WishlistService/CreateWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).CreateWishlist(ctx, req.(*CreateWishlistReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_AddItemWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddItemReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).AddItemWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wishlist.WishlistService/AddItemWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).AddItemWishlist(ctx, req.(*AddItemReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WishlistService_ListWishlist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWishlistReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WishlistServiceServer).ListWishlist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/wishlist.WishlistService/ListWishlist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WishlistServiceServer).ListWishlist(ctx, req.(*ListWishlistReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WishlistService_ServiceDesc is the grpc.ServiceDesc for WishlistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WishlistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wishlist.WishlistService",
	HandlerType: (*WishlistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateWishlist",
			Handler:    _WishlistService_CreateWishlist_Handler,
		},
		{
			MethodName: "AddItemWishlist",
			Handler:    _WishlistService_AddItemWishlist_Handler,
		},
		{
			MethodName: "ListWishlist",
			Handler:    _WishlistService_ListWishlist_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "whishlist.proto",
}
